// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model Cashier {
  id                  String             @id @default(uuid())
  firstName           String
  lastName            String?
  email               String             @unique
  password            String
  phoneNumber         String?            @unique
  gender              Gender?
  dateOfBirth         String?
  isEmailVerified     Boolean          @default(false)
  passwordResetCount  Int              @default(0)
  emailChangeCount    Int              @default(0)
  avatarImgUrl        String?
  cldPublicId         String? // Cloudinary public ID for the avatar image
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?

  shift               Shift?     @relation(fields: [shiftId], references: [id])
  shiftId             String?

  cart Cart?
  @@map("users")
}

model Admin {
  id                  String             @id @default(uuid())
  firstName         String
  lastName          String?
  email             String    @unique
  password          String
  phoneNumber       String    @unique

  isEmailVerified   Boolean @default(false)
  passwordResetCount Int     @default(0)
  emailChangeCount   Int     @default(0)
  avatarImgUrl      String?
  cldPublicId       String? // Cloudinary public ID for the avatar image

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?
  @@map("admins")

}

enum Gender {
  Male
  Female
}

model Shift{
  id                String   @id @default(cuid())
  startTime         DateTime
  endTime           DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?

  cashier Cashier[]
  @@map("shifts")

}

model Product {
  id                String   @id @default(cuid())
  productCategoryId Int
  name              String
  slug              String   @unique
  description       String?
  price             Float

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  productStock      ProductStock[]
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  @@map("products")
}

model ProductCategory{
  id                Int       @id @default(autoincrement())
  name              String
  slug              String   @unique
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  product Product[]

  @@map("product_categories")
}

model ProductStock {
  productId         String
  @@id ([productId])
  product          Product @relation(fields: [productId], references: [id])
  stock             Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  // stockHistory      ProductStockHistory[]
  
  @@map("product_stocks")
}

model Cart {
  id                String   @id @default(cuid())
  cashierId         String   @unique
  // cartItems         CartItem[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  cashier              Cashier @relation(fields: [cashierId], references: [id])

  @@map("carts")
}

model Transaction{
    id                String   @id @default(cuid())
  paymentType       PaymentType
  paymentAmount     Float
  paymentDate       DateTime

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  transactionHistory TransactionHistory[]
  @@map("transactions")
}

enum PaymentType {
  CASH
  DEBIT
}

model TransactionHistory{
  id                  String                @id @default(cuid())
  transactionId String

  transaction Transaction @relation(fields: [transactionId], references: [id])
  @@map("transaction_histories")
}
