// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Cashier {
  id                  String             @id @default(uuid())
  firstName           String
  lastName            String?
  email               String             @unique
  password            String
  phoneNumber         String?            @unique
  gender              Gender?
  isEmailVerified     Boolean          @default(false)
  avatarImgUrl        String?
  cldPublicId         String? // Cloudinary public ID for the avatar image
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?

  shift               ShiftSession
  cashierBalanceHistory CashierBalanceHistory[]
  cart                Cart[]
  transaction         Transaction[]
  @@map("users")
}

enum ShiftSession {
  SHIFT1
  SHIFT2
}

model Admin {
  id                  String             @id @default(uuid())
  firstName         String
  lastName          String?
  email             String    @unique
  password          String
  phoneNumber       String    @unique

  isEmailVerified   Boolean @default(false)
  avatarImgUrl      String?
  cldPublicId       String? // Cloudinary public ID for the avatar image

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?
  @@map("admins")

}

enum Gender {
  Male
  Female
}

model CashierBalanceHistory {
  id                  String      @id @default(cuid())
  cashierId           String
  cashier             Cashier   @relation(fields: [cashierId],references: [id])
  startTime           DateTime
  endTime             DateTime?
  startingCash        Float
  endingCash          Float?
  totalRevenue        Float @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?

  transaction         Transaction[]
  @@map("cashier_shift_histories")
}

model Product {
  id                String   @id @default(cuid())
  productCategoryId Int
  name              String
  slug              String   @unique
  description       String?
  price             Float
  productImgUrl String?
  cldPublicId String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  cartItems         CartItem[]
  transactionItems  TransactionItem[]
  @@map("products")
}

model ProductCategory{
  id                Int       @id @default(autoincrement())
  name              String
  slug              String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  product Product[]

  @@map("product_categories")
}

model Cart {
  id                String   @id @default(cuid())
  customerName		    String
  cashierId         String  
  cartItems         CartItem[]
  status            CartStatus    @default(ACTIVE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  cashier              Cashier @relation(fields: [cashierId], references: [id])
  transaction       Transaction?

  @@map("carts")
}

enum CartStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model CartItem {
  id                String @id @default(cuid())
  cartId            String
  cart              Cart @relation(fields: [cartId],references: [id])
  productId         String
  product           Product @relation(fields:[productId],references: [id])
  quantity          Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  @@map("cart_items")
}



model Transaction {
    id                String   @id @default(cuid())
    cartId          String      @unique
    cart            Cart @relation(fields: [cartId], references: [id])
    cashierId       String
    cashier         Cashier @relation(fields: [cashierId], references: [id])
    cashierBalanceHistoryId String
    cashierBalanceHistory CashierBalanceHistory @relation(fields: [cashierBalanceHistoryId],references: [id])
  paymentType       PaymentType
  debitCardNumber   String?
  totalAmount     Float
  changeAmount      Float?
  paymentDate       DateTime

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  transactionItems   TransactionItem[]
  @@map("transactions")
}

enum PaymentType {
  CASH
  DEBIT
}

model TransactionItem {
  id                String    @id @default(cuid())
  transactionId     String
  transaction       Transaction @relation(fields: [transactionId], references: [id])
  productId         String
  product           Product @relation(fields: [productId],references: [id])
  quantity          Int
  unitPrice         Float
  subTotal          Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  @@map("transaction_items")
}